import cv2 as cv
import imutils
from imutils import contours
from imutils import perspective
from scipy.spatial import distance as dist
import numpy as np

def midpoint(ptA, ptB):
    return ((ptA[0] + ptB[0]) * 0.5, (ptA[1] + ptB[1]) * 0.5)

# 일단 노트북 캠으로 테스트
capture = cv.VideoCapture(0)
#capture.set(cv.CAP_PROP_FRAME_WIDTH, 640)
#capture.set(cv.CAP_PROP_FRAME_HEIGHT, 480)

while True:
    ret, frame = capture.read()
    if not ret:
        break

    gray = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)
    gray = cv.GaussianBlur(gray, (7, 7), 0)

    edged = cv.Canny(gray, 50, 100)
    edged = cv.dilate(edged, None, iterations=1)
    edged = cv.erode(edged, None, iterations=1)

    cnts = cv.findContours(edged.copy(), cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE)
    cnts = imutils.grab_contours(cnts)

    (cnts, _) = contours.sort_contours(cnts)
    reference = None

    for c in cnts:
        if cv.contourArea(c) < 100:
            continue

        #orig = frame.copy()
        box = cv.minAreaRect(c)
        box = cv.cv.BoxPoints(box) if imutils.is_cv2() else cv.boxPoints(box)
        box = np.array(box, dtype="int")

        box = perspective.order_points(box)
        #cv.drawContours(orig, [box.astype("int")], -1, (0, 255, 0), 2)
        cv.drawContours(frame, [box.astype("int")], -1, (0, 255, 0), 2)

        for (x, y) in box:
            #cv.circle(orig, (int(x), int(y)), 5, (0, 0, 255), -1)
            cv.circle(frame, (int(x), int(y)), 5, (0, 0, 255), -1)

        (tl, tr, br, bl) = box
        (tltrX, tltrY) = midpoint(tl, tr)
        (blbrX, blbrY) = midpoint(bl, br)

        (tlblX, tlblY) = midpoint(tl, bl)
        (trbrX, trbrY) = midpoint(tr, br)

        '''
        cv.circle(orig, (int(tltrX), int(tltrY)), 5, (255, 0, 0), -1)
        cv.circle(orig, (int(blbrX), int(blbrY)), 5, (255, 0, 0), -1)
        cv.circle(orig, (int(tlblX), int(tlblY)), 5, (255, 0, 0), -1)
        cv.circle(orig, (int(trbrX), int(trbrY)), 5, (255, 0, 0), -1)
        '''
        cv.circle(frame, (int(tltrX), int(tltrY)), 5, (255, 0, 0), -1)
        cv.circle(frame, (int(blbrX), int(blbrY)), 5, (255, 0, 0), -1)
        cv.circle(frame, (int(tlblX), int(tlblY)), 5, (255, 0, 0), -1)
        cv.circle(frame, (int(trbrX), int(trbrY)), 5, (255, 0, 0), -1)

        '''
        cv.line(orig, (int(tltrX), int(tltrY)), (int(blbrX), int(blbrY)), (255, 0, 255), 2)
        cv.line(orig, (int(tlblX), int(tlblY)), (int(trbrX), int(trbrY)), (255, 0, 255), 2)
        '''
        cv.line(frame, (int(tltrX), int(tltrY)), (int(blbrX), int(blbrY)), (255, 0, 255), 2)
        cv.line(frame, (int(tlblX), int(tlblY)), (int(trbrX), int(trbrY)), (255, 0, 255), 2)

        dA = dist.euclidean((tltrX, tltrY), (blbrX, blbrY))
        dB = dist.euclidean((tlblX, tlblY), (trbrX, trbrY))

        if reference is None:
            reference = dB / 2.4

        dimA = dA / reference
        dimB = dB / reference

        '''
        cv.putText(orig, "{:.1f}cm".format(dimA), (int(tltrX - 15), int(tltrY - 10)), cv.FONT_HERSHEY_SIMPLEX, 0.65, (255, 255, 255), 2)
        cv.putText(orig, "{:.1f}cm".format(dimB), (int(trbrX - 15), int(trbrY - 10)), cv.FONT_HERSHEY_SIMPLEX, 0.65, (255, 255, 255), 2)
        '''
        cv.putText(frame, "{:.1f}cm".format(dimA), (int(tltrX - 15), int(tltrY - 10)), cv.FONT_HERSHEY_SIMPLEX, 0.65, (255, 255, 255), 2)
        cv.putText(frame, "{:.1f}cm".format(dimB), (int(trbrX - 15), int(trbrY - 10)), cv.FONT_HERSHEY_SIMPLEX, 0.65, (255, 255, 255), 2)

    cv.imshow("Laptop Cam", frame)
    if cv.waitKey(1) > 0:
        break


capture.release()
cv.destroyAllWindows()